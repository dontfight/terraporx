# -*- mode: ruby -*-

# vi: set ft=ruby :

MEM=2048
CPU=2
DISK_SIZE = 15*1024
HDD = "sdc"

require 'securerandom'
clusterID = SecureRandom.uuid

boxes = [
    { :name => "srv1", :eth1 => "192.168.205.10" },
    { :name => "srv2", :eth1 => "192.168.205.11" },
    { :name => "srv3", :eth1 => "192.168.205.12" }
]

$script = <<SCRIPT

sudo apt-get -y install wget unzip

if ! docker --version > /dev/null 2>&1
then
   echo "Installing Docker..."
   curl -fsSL https://get.docker.com | sh
   sudo systemctl daemon-reload
   sudo systemctl enable docker
   sudo systemctl start docker
else
   echo "Docker already installed"
fi

SCRIPT

Vagrant.configure(2) do |config|

  config.vm.provider "virtualbox"

  config.vm.box = "ubuntu/xenial64"

  join_string = ""
  boxes.each do |b|
      join_string = "#{join_string}" + " " + b[:eth1]
  end
  puts "Static IP Addrs are : #{join_string}"


  boxes.each_with_index do |opts, idx|
    config.vm.define opts[:name] do |config|
      config.vm.hostname = opts[:name]
      vdisk_name = ".vagrant/#{opts[:name]}_#{HDD}.vdi"
      config.vm.provider "virtualbox" do |v|
        v.customize ["modifyvm", :id, "--memory", MEM ]
        v.customize ["modifyvm", :id, "--cpus", CPU ]
        unless File.exist?(vdisk_name)
           v.customize ['createhd', '--filename', vdisk_name, '--size', DISK_SIZE ]
           v.customize ['storageattach', :id, '--storagectl', "SCSI", '--port', 2, '--device', 0, '--type', 'hdd', '--medium', vdisk_name]
           v.customize [ "modifyvm", :id, "--uartmode1", "disconnected" ]
        end
      end
 
      config.vm.provision "file", source: "templates/consul.sh", destination: "/tmp/consul.sh" 
      config.vm.provision "shell", inline: "chmod 755 /tmp/consul.sh"
      config.vm.provision "file", source: "templates/nomad.sh", destination: "/tmp/nomad.sh" 
      config.vm.provision "shell", inline: "chmod 755 /tmp/nomad.sh"

      config.vm.provision "shell" , inline: $script
      config.vm.provision "shell" , inline: "/usr/bin/sudo /tmp/consul.sh #{opts[:eth1]} #{join_string}"
      config.vm.provision "shell" , inline: "/usr/bin/sudo /tmp/nomad.sh #{opts[:eth1]} #{join_string}"
      config.vm.provision "shell" , inline: "/usr/bin/sudo echo export NOMAD_ADDR=http://#{opts[:eth1]}:4646 >> .bash_profile"
      config.vm.provision "shell", inline: "curl -fsSL https://get.portworx.com | sh -s -- -c #{clusterID} -k 'consul:http://127.0.0.1:8500' -a -f -m enp0s8 -d enp0s8"
      config.vm.network :private_network, ip: opts[:eth1]
      if idx == boxes.size - 1
           config.vm.provision "file", source: "templates/hashiui.sh", destination: "/tmp/hashiui.sh" 
           config.vm.provision "shell", inline: "chmod 755 /tmp/hashiui.sh"
           config.vm.provision "shell" , inline: "/usr/bin/sudo /tmp/hashiui.sh #{opts[:eth1]}"
           config.vm.network "forwarded_port", guest: 3000, host: 3000, protocol: "tcp"
           # config.vm.provision "file", source: "jobs/px.nomad", destination: "/tmp/px.nomad" 
           # config.vm.provision "shell" , inline: "echo Waiting for cluster to come up ; sleep 10"
           # config.vm.provision "shell" , inline: "NOMAD_ADDR=http://#{opts[:eth1]}:4646 nomad run /tmp/px.nomad"
           hostname=`hostname`
           puts "Hashi UI will be available at http://#{hostname}:3000"
       end
    end
  end
end

